// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/igorscandido/go-transactions-api/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// StripeClient is an autogenerated mock type for the StripeClient type
type StripeClient struct {
	mock.Mock
}

// CreatePaymentMethod provides a mock function with given fields: ctx, cardDetails
func (_m *StripeClient) CreatePaymentMethod(ctx context.Context, cardDetails *domain.CardDetails) (*string, error) {
	ret := _m.Called(ctx, cardDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentMethod")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CardDetails) (*string, error)); ok {
		return rf(ctx, cardDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CardDetails) *string); ok {
		r0 = rf(ctx, cardDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CardDetails) error); ok {
		r1 = rf(ctx, cardDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentStatus provides a mock function with given fields: ctx, paymentID
func (_m *StripeClient) GetPaymentStatus(ctx context.Context, paymentID *string) (*string, error) {
	ret := _m.Called(ctx, paymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentStatus")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*string, error)); ok {
		return rf(ctx, paymentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *string); ok {
		r0 = rf(ctx, paymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPayment provides a mock function with given fields: ctx, payment, paymentMethodID
func (_m *StripeClient) ProcessPayment(ctx context.Context, payment *domain.Payment, paymentMethodID *string) (*string, error) {
	ret := _m.Called(ctx, payment, paymentMethodID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Payment, *string) (*string, error)); ok {
		return rf(ctx, payment, paymentMethodID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Payment, *string) *string); ok {
		r0 = rf(ctx, payment, paymentMethodID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Payment, *string) error); ok {
		r1 = rf(ctx, payment, paymentMethodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStripeClient creates a new instance of StripeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStripeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *StripeClient {
	mock := &StripeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
